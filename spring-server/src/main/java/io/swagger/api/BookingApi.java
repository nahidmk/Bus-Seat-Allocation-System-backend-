/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Booking;
import io.swagger.annotations.*;
import io.swagger.model.Bus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-30T00:10:05.092Z")

@Api(value = "booking", description = "the booking API")
@RequestMapping(value = "/v2")
public interface BookingApi {

    @ApiOperation(value = "Add a new Booking", nickname = "addBooking", notes = "", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/booking",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addBooking(@ApiParam(value = "Booking object that needs to be add" ,required=true )  @Valid @RequestBody Booking body);


    @ApiOperation(value = "Deletes a  Booking", nickname = "deleteBooking", notes = "", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid object"),
        @ApiResponse(code = 404, message = "Booking not found") })
    @RequestMapping(value = "/booking",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBooking(@ApiParam(value = "Booking object that needs to be deleted" ,required=true )  @Valid @RequestBody Booking body);


    @ApiOperation(value = "Find all Booking", nickname = "findAllBooking", notes = "Return All the Booking from the system", response = Booking.class, responseContainer = "List", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Booking.class, responseContainer = "List") })
    @RequestMapping(value = "/booking",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Booking>> findAllBooking();


    @ApiOperation(value = "Finds Booking by Bus Number", nickname = "findBookingByBusNumber", notes = "", response = Booking.class, responseContainer = "List", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Booking.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Booking Number") })
    @RequestMapping(value = "/booking/{busNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Booking>> findBookingByBusNumber(@ApiParam(value = " Bus Number that need to be considered for filter",required=true) @PathVariable("busNumber") String busNumber);


    @ApiOperation(value = "Finds Booking by phone Number", nickname = "findBookingByphone", notes = "", response = Booking.class, responseContainer = "List", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Booking.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Booking phone") })
    @RequestMapping(value = "/booking/by/{phone}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Booking>> findBookingByphone(@ApiParam(value = " phone Number that need to be considered for filter",required=true) @PathVariable("phone") String phone);


    @ApiOperation(value = "Update an existing Booking", nickname = "updateBooking", notes = "Modify the existing Booking", tags={ "Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Booing not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/booking",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateBooking(@ApiParam(value = "Booking object that needs to be added" ,required=true )  @Valid @RequestBody Booking body);

    @ApiOperation(value = "Delete List of Booking", nickname = "deleteListOfBooking", notes = "", tags={ "Booking", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid object"),
            @ApiResponse(code = 404, message = "Booking not found") })
    @RequestMapping(value = "/booking/{phone}/{busNumber}/{noOfBooking}",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteListOfBooking(@ApiParam(value = " Phone required for find list of list of booking",required=true) @PathVariable("phone") String phone,@ApiParam(value = " Bus Number required for find list of list of booking",required=true) @PathVariable("busNumber") String busNumber,@ApiParam(value = " noOfbooking is required for deleteing the number of booking",required=true) @PathVariable("noOfBooking") Integer noOfBooking);


    @ApiOperation(value = "Finds Booking by Bus Number and Phone number", nickname = "findBookingByphoneAndBusNumber", notes = "", response = Booking.class, responseContainer = "List", tags={ "Booking", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Booking.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid Booking phone") })
    @RequestMapping(value = "/booking/by/{phone}/{busNumber}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Booking>> findBookingByphoneAndBusNumber(@ApiParam(value = " phone Number that need to be considered for filter",required=true) @PathVariable("phone") String phone,@ApiParam(value = " Bus Number that need to be considered for filter",required=true) @PathVariable("busNumber") String busNumber);

    @ApiOperation(value = "Add  new Bookings", nickname = "addBookingList", notes = "", tags={ "Booking", })
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/booking/list/{bookingList}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> addBookingList(@ApiParam(value = "Bookings object that needs to be add" ,required=true )  @PathVariable("bookingList") List<Booking> bookingList);

}
